import { app, BrowserWindow, ipcMain, nativeTheme, Menu } from 'electron';
import { attachTitlebarToWindow, setupTitlebar } from 'custom-electron-titlebar/main';

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;
// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
    app.quit();
}

setupTitlebar();

const createWindow = (): void => {
    // Create the browser window.
    const main_window = new BrowserWindow({
        height: 800,
        width: 1000,
        webPreferences: {
            preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
        },

        // hide native titlebar
        titleBarStyle: "hidden",

        // expose window controls in Windows/Linux
        ...(process.platform !== 'darwin' ? { titleBarOverlay: true } : {})
    });

    // and load the index.html of the app.
    main_window.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

    // Open the DevTools.
    main_window.webContents.openDevTools();

    // Maximize window
    main_window.maximize();

    // attach custom-electron-titlebar
    attachTitlebarToWindow;
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
    if (process.platform !== 'darwin') {
        app.quit();
    }
});

app.on('activate', () => {
    // On OS X it's common to re-create a window in the app when the
    // dock icon is clicked and there are no other windows open.
    if (BrowserWindow.getAllWindows().length === 0) {
        createWindow();
    }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
function setTheme (theme: 'dark' | 'light') {
    nativeTheme.themeSource = theme;
}

ipcMain.handle('nativeTheme.setTheme', (_, theme: 'dark' | 'light') => {
    setTheme(theme);
})

ipcMain.handle('nativeTheme.getTheme', () => {
    return nativeTheme.shouldUseDarkColors ? 'dark' : 'light';
})